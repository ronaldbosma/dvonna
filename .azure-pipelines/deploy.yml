parameters:
- name: artifactName
  type: string
- name: siteName
  type: string
- name: location
  type: string
  default: 'westeurope'
- name: environment
  type: string
  default: ''
- name: azureSubscription
  type: string
  default: 'Visual Studio Enterprise 1'
- name: uiCulture
  type: string


jobs:
- job:
  pool:
    vmImage: 'ubuntu-latest'

  variables:
    # Variable is used to update the Culture in appsettings.json
    DvOnnaConfig.Culture: '${{ parameters.uiCulture }}'

  steps:
    - checkout: none  # no need to checkout any code because we only need the artifact
    
    - download: current
      artifact: '${{ parameters.artifactName }}'

    - task: AzureCLI@2
      displayName: 'Create Azure resources for ${{ parameters.siteName }}'
      inputs:
        azureSubscription: '${{ parameters.azureSubscription }}'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          Write-Host "siteName: ${{ parameters.siteName }}"
          Write-Host "location: ${{ parameters.location }}"
          Write-Host "environment: ${{ parameters.environment }}"

          $deploymentResults = az deployment sub create `
            --location ${{ parameters.location }} `
            --name '${{ parameters.siteName }}-blazor-app' `
            --template-file '$(Pipeline.Workspace)/${{ parameters.artifactName }}/.bicep/dvonna.bicep' `
            --parameters siteName='${{ parameters.siteName }}' location='${{ parameters.location }}' environment='${{ parameters.environment }}'

          $deploymentResultsObject = $deploymentResults | ConvertFrom-Json
          $dvOnnaDataEndpoint = $deploymentResultsObject.properties.output.dvOnnaDataEndpoint
          
          # Save data endpoint in variable so it can be used to update appsettings.json
          Write-Host "##vso[task.setvariable variable=DvOnnaConfig.DataEndpoint;]$dvOnnaDataEndpoint"

    - task: FileTransform@1
      displayName: 'Update appsettings.json'
      inputs:
        folderPath: '$(Pipeline.Workspace)/${{ parameters.artifactName }}/*.zip'
        fileType: 'json'
        targetFiles: 'wwwroot/appsettings.json'

    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Blazor App to ${{ parameters.siteName }}'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: '${{ parameters.azureSubscription }}'
        appType: 'webApp'
        WebAppName: '${{ parameters.siteName }}'
        packageForLinux: '$(Pipeline.Workspace)/${{ parameters.artifactName }}/*.zip'